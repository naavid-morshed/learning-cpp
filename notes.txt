1. Preprocessor: Line beginning with a # are called directives and are read and interpreted
                 by preprocessors. This is done before the compilation of the program.

2. cout << [insertion operator]
   cin >> [extraction operator] [doesn't allow spaces in strings, for string with gaps/spaces see 9.]

3. std::out : Standard Character Output Device

4. using namespace std: (“using namespace std” is considered bad practice)
    Introduces visibility of components of std library. These components can now be used
    without declaring std in front of every component every-time;

5. namespace nspace_name {
     int a = 2;
   } this allows declaration of multiple variables of same name. see "namespace.cpp"

6. typedef std::string text_t [typedef is used for creating custom datatype, 
   convention is to end type name with "_t"]
   ["typedef" has been replaced with "using" keyword, because it works better with templates]

7. using text_t = std::string [does the same thing as typedef but is considered better, 
   why better? will explore later]

8. ++number(increment first) and number++(increment later) both works.

9. std::getline(std::cin, inpName)

10. cin puts a white space character after taking input, [check getline.cpp]
    it needs to be expelled otherwise it will be taken as input by getline

11. #include <iostream> [provides standard/std library for use]
12. #include <cmath> [provides some arithmatic functions like pow(x, y), sqrt(x), abs(x) etc]
    // abs will return the absolute value
    // floor(x) [round down]
    // ceil(x) [round up]
    // round(x) [if < .5 then floor, if >= .5 then ceil]
    
13. iostream, cmath are called header files

14. std::max(x, y), std::min(x, y)

15. std::cout << (hungry ? "You are hungry" : "You are Full") << std::endl;
    [parenthesis is necessary here since ? has lower precedence compared to <<]

16. tried several string operations, check string-operations.cpp
    (insert, at, clear, append, erase(index1, index2), )

17. int num; [if not assigned the num will be set to 0 for global variables, for local variables default
    value will hold garbage is not specifically assigned]

18. random number (check cpp)
    srand(time(NULL)); // this will create seed with current time in miliseconds as range
    int num = (rand() % 2) + 1; // die roll, get either 0/1, +1 to make it 1/2

19. time(null) is the same as time(0), this will create current time in miliseconds

20. it is possible to declare global variables accessible to all functions, had to be declared outside of main functions
    [between both local and global variables with same name, local variables will have frist priority]
    [::var can be used to call global variable if both local and global variables have same name]

21. #include <iomanip>
22. how to clear buffer after input =>
    std::cin.clear();
    fflush(stdin);
    [not sure where to use these two lines]

24. sizeof(datatype/variable) [finds out how many byte(s) are begin used by a data type]
    [for example: float takes 4 bytes, double takes 8 bytes]
    [
      std::string a[1];
      std::cout << sizeof(a) << std::endl;
    ]

25. length methods are not available for all types of arrays, solution:
    [sizeof(arr)/sizeof(datatype)]
    [sizeof(arr)/sizeof(arr[0])]

26. when arrays are passed to a function, it decays into a pointer, and the function has no information
    on the size of the array.

27. fill(arr, arr + length, value) [fill an array with one specified value]
    fill(start, end, val) [see fill.cpp]

28. 2D array [check 2d-array.cpp]

29. POINTER: a pointer is variable that holds the memory location of another variable.
    std::string name = "Naavid Morshed";
    std::string *pName = &name; [this is how a pointer is typically declared, other ways are available] 
    [* is called dereference operator] [std::string* pName1, pName2; another way of declaraction]
    [std::string* pName = nullptr, this is done if address is not immediately asssigned]

    ** SPECIAL BEHAVIOR **
        std::string arr[5] = {"A", "B", "F", "C", "E"};
        std::string *pArr = arr;

        std::cout << *pArr << std::endl;
        [here dereferenced *pArr will print the first element of the array and decay into a pointer again
        and will only print the first element]

    ** MORE SPECIAL BEHAVIOR **
        int* pointer = nullptr;

        std::cout << *pointer << std::endl;
        [result => zsh: segmentation fault (core dumped); program crash or undefined behavior]
        [check with => if(pointer != nullptr)]

30. Dynamic Memory : Dynamic Memory is memory that is allocated after the program is already running and 
    allocated. [check dynamic-memory.cpp]
    [Use new operator to allocate memory in heap rather than in stack]
    [Useful when memory need is unknown before running program]

    ** USAGE **
    int* pointer = new int;
    *pointer = 21;
    delete pointer; [always delete and free memory space after using new keyword to allocate memory,
    Otherwise may cause memory leak]

    [delete[] if you're going to delete an array, array who's memory is allocated in heap]

11. Function Templates: Can accept any data type [see function-template.cpp]

12. Struct : A STRUCT is a structure that groups related variables under one name.
             [variables in a struct is known as member]
             [a struct can be imagined as a custom data type]
             [see struct.cpp]

13. Printing boolean does not print true or false, rather 0 for false and 1 for true.

14. Enum : An user-defined datatype that consists of a pair named integer constants.
           [should be used to represent a set of potential options] [see enum.cpp]
           
            enum Weekdays
            {
                saturday,
                sunday,
                monday,
                tuesday,
                wednesday,
                thursday,
                friday
            }; => is the same as => enum Weekdays
                                    {
                                        saturday = 0,
                                        sunday = 1,
                                        monday = 2,
                                        tuesday = 3,
                                        wednesday = 4,
                                        thursday = 5,
                                        friday = 6
                                    };

15. Strings cannot be used with switches.

16. cpp inheritence : [cpp allows multiple inheritence, may result in diamond problem]
    (class TeacherAssistant : public Student) // has to be public otherwise inheritance will be private
    [here TeacherAssistant extends Student class, if not specified public Student the TeacherAssistant
     instance wouldn't be able to access Student class methods]
    [Student(std::string name, int id, std::string department): name(name), id(id), department(department) // constructor initializer list]
    [DerivedClass(params): BaseClass(params)] // constructor initializer list for Parent Class

17. Destructor : Destructor is called when object goes out of scope to release memory allocated from the heap.
    Destructors are called in reverse order of creation when multiple objects need to destroyed.
    [if memory allocated with new, then DELETE should be used to destroy object]
    [cannot be overloaded or cannot have parameters]

    ** VIRTUAL_DESTRUCTOR ** [Study Later]
    ** PRIVATE DESTRUCTOR ** [Study Later]

18. How to make header files that can be used in other

    #ifndef BOOK_H
    #define BOOK_H

    // Header file content goes here

    #endif

19. Abstract Class: A class is abstract if it has at least one pure virtual function.
    Virtual Function: Virtual Function/Method is a member function that is declared
                      within a base/parent class is overridden by a child/derived class.
                      Virtual functions are used to achieve runtime polymorphism and
                      the resolving of a function is done at runtime.

    *** if a derived/child class does not override a parent's virtual function then ***
    *** it too becomes an Abstract class and cannot be instantiated                 ***

    ** A class may have a virtual destructor but cannot have a virtual constructor **

20.


